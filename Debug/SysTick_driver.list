
SysTick_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000025c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003f0  080003f8  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003f0  080003f0  000013f8  2**0
                  CONTENTS
  4 .ARM          00000000  080003f0  080003f0  000013f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f0  080003f8  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f0  080003f0  000013f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003f4  080003f4  000013f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003f8  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003f8  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000644  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002ea  00000000  00000000  00001a6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a0  00000000  00000000  00001d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000065  00000000  00000000  00001df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e9ed  00000000  00000000  00001e5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000f30  00000000  00000000  0001084a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000532a6  00000000  00000000  0001177a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064a20  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000130  00000000  00000000  00064a64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00064b94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080003d8 	.word	0x080003d8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	080003d8 	.word	0x080003d8

080001d4 <InitGPIO>:
#include "stm32f4xx.h"



void InitGPIO(GPIO_TypeDef* GPIOx, int GPIO_Pin) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
 80001dc:	6039      	str	r1, [r7, #0]
	// 1. Enable clock for GPIOA peripheral
	RCC->AHB1ENR |= (1U << 0);
 80001de:	4b25      	ldr	r3, [pc, #148]	@ (8000274 <InitGPIO+0xa0>)
 80001e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80001e2:	4a24      	ldr	r2, [pc, #144]	@ (8000274 <InitGPIO+0xa0>)
 80001e4:	f043 0301 	orr.w	r3, r3, #1
 80001e8:	6313      	str	r3, [r2, #48]	@ 0x30

	GPIOx->MODER &=  ~(3U << (GPIO_Pin * 2));
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	681a      	ldr	r2, [r3, #0]
 80001ee:	683b      	ldr	r3, [r7, #0]
 80001f0:	005b      	lsls	r3, r3, #1
 80001f2:	2103      	movs	r1, #3
 80001f4:	fa01 f303 	lsl.w	r3, r1, r3
 80001f8:	43db      	mvns	r3, r3
 80001fa:	401a      	ands	r2, r3
 80001fc:	687b      	ldr	r3, [r7, #4]
 80001fe:	601a      	str	r2, [r3, #0]
	GPIOx->MODER |= 1U << (GPIO_Pin * 2);
 8000200:	687b      	ldr	r3, [r7, #4]
 8000202:	681a      	ldr	r2, [r3, #0]
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	005b      	lsls	r3, r3, #1
 8000208:	2101      	movs	r1, #1
 800020a:	fa01 f303 	lsl.w	r3, r1, r3
 800020e:	431a      	orrs	r2, r3
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	601a      	str	r2, [r3, #0]

	GPIOx->OTYPER &= ~(1U << GPIO_Pin);
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	685a      	ldr	r2, [r3, #4]
 8000218:	2101      	movs	r1, #1
 800021a:	683b      	ldr	r3, [r7, #0]
 800021c:	fa01 f303 	lsl.w	r3, r1, r3
 8000220:	43db      	mvns	r3, r3
 8000222:	401a      	ands	r2, r3
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	605a      	str	r2, [r3, #4]

	GPIOx->OSPEEDR &= ~(3U << (GPIO_Pin * 2));
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	689a      	ldr	r2, [r3, #8]
 800022c:	683b      	ldr	r3, [r7, #0]
 800022e:	005b      	lsls	r3, r3, #1
 8000230:	2103      	movs	r1, #3
 8000232:	fa01 f303 	lsl.w	r3, r1, r3
 8000236:	43db      	mvns	r3, r3
 8000238:	401a      	ands	r2, r3
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	609a      	str	r2, [r3, #8]
	GPIOx->OSPEEDR |=  (1U << (GPIO_Pin * 2));
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	689a      	ldr	r2, [r3, #8]
 8000242:	683b      	ldr	r3, [r7, #0]
 8000244:	005b      	lsls	r3, r3, #1
 8000246:	2101      	movs	r1, #1
 8000248:	fa01 f303 	lsl.w	r3, r1, r3
 800024c:	431a      	orrs	r2, r3
 800024e:	687b      	ldr	r3, [r7, #4]
 8000250:	609a      	str	r2, [r3, #8]

	GPIOx->PUPDR &= ~(3U << (GPIO_Pin * 2));
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	68da      	ldr	r2, [r3, #12]
 8000256:	683b      	ldr	r3, [r7, #0]
 8000258:	005b      	lsls	r3, r3, #1
 800025a:	2103      	movs	r1, #3
 800025c:	fa01 f303 	lsl.w	r3, r1, r3
 8000260:	43db      	mvns	r3, r3
 8000262:	401a      	ands	r2, r3
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	60da      	str	r2, [r3, #12]

}
 8000268:	bf00      	nop
 800026a:	370c      	adds	r7, #12
 800026c:	46bd      	mov	sp, r7
 800026e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000272:	4770      	bx	lr
 8000274:	40023800 	.word	0x40023800

08000278 <Pin_Toggle>:

void Pin_Toggle(GPIO_TypeDef* GPIOx, int GPIO_Pin) {
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	6078      	str	r0, [r7, #4]
 8000280:	6039      	str	r1, [r7, #0]
	GPIOx->ODR ^= (1U << GPIO_Pin);
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	695a      	ldr	r2, [r3, #20]
 8000286:	2101      	movs	r1, #1
 8000288:	683b      	ldr	r3, [r7, #0]
 800028a:	fa01 f303 	lsl.w	r3, r1, r3
 800028e:	405a      	eors	r2, r3
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	615a      	str	r2, [r3, #20]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <main>:
#include "main.h"



int main(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	af00      	add	r7, sp, #0
	InitSysTick();
 80002a4:	f000 f810 	bl	80002c8 <InitSysTick>
	InitGPIO(GPIO, LED);
 80002a8:	2105      	movs	r1, #5
 80002aa:	4806      	ldr	r0, [pc, #24]	@ (80002c4 <main+0x24>)
 80002ac:	f7ff ff92 	bl	80001d4 <InitGPIO>

    /* Loop forever */
	while (1) {
		Pin_Toggle(GPIO, LED);
 80002b0:	2105      	movs	r1, #5
 80002b2:	4804      	ldr	r0, [pc, #16]	@ (80002c4 <main+0x24>)
 80002b4:	f7ff ffe0 	bl	8000278 <Pin_Toggle>
		SysTickDelay(500);
 80002b8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80002bc:	f000 f81e 	bl	80002fc <SysTickDelay>
		Pin_Toggle(GPIO, LED);
 80002c0:	bf00      	nop
 80002c2:	e7f5      	b.n	80002b0 <main+0x10>
 80002c4:	40020000 	.word	0x40020000

080002c8 <InitSysTick>:
#include "stm32f4xx.h"
#include "systick.h"



void InitSysTick() {
 80002c8:	b480      	push	{r7}
 80002ca:	af00      	add	r7, sp, #0
	 * 2. Clear current value.
	 * 3. Program Control and Status register.
	*/

	// 1. Program reload value.
	SysTick->LOAD = LOAD_VALUE;
 80002cc:	4b0a      	ldr	r3, [pc, #40]	@ (80002f8 <InitSysTick+0x30>)
 80002ce:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80002d2:	605a      	str	r2, [r3, #4]

	// 2. Clear current value.
	SysTick->VAL = 0U;
 80002d4:	4b08      	ldr	r3, [pc, #32]	@ (80002f8 <InitSysTick+0x30>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	609a      	str	r2, [r3, #8]

	// 3. Program Control and Status register.
	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
 80002da:	4b07      	ldr	r3, [pc, #28]	@ (80002f8 <InitSysTick+0x30>)
 80002dc:	2205      	movs	r2, #5
 80002de:	601a      	str	r2, [r3, #0]
	SysTick->CTRL &= ~(1 << SysTick_CTRL_TICKINT_Pos);
 80002e0:	4b05      	ldr	r3, [pc, #20]	@ (80002f8 <InitSysTick+0x30>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4a04      	ldr	r2, [pc, #16]	@ (80002f8 <InitSysTick+0x30>)
 80002e6:	f023 0302 	bic.w	r3, r3, #2
 80002ea:	6013      	str	r3, [r2, #0]

}
 80002ec:	bf00      	nop
 80002ee:	46bd      	mov	sp, r7
 80002f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f4:	4770      	bx	lr
 80002f6:	bf00      	nop
 80002f8:	e000e010 	.word	0xe000e010

080002fc <SysTickDelay>:

void SysTickDelay(int delay_ms) {
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < delay_ms; ++i) {
 8000304:	2300      	movs	r3, #0
 8000306:	60fb      	str	r3, [r7, #12]
 8000308:	e009      	b.n	800031e <SysTickDelay+0x22>
		// This will delay for 1 ms.
		while ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == 0) {}
 800030a:	bf00      	nop
 800030c:	4b0a      	ldr	r3, [pc, #40]	@ (8000338 <SysTickDelay+0x3c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000314:	2b00      	cmp	r3, #0
 8000316:	d0f9      	beq.n	800030c <SysTickDelay+0x10>
	for (int i = 0; i < delay_ms; ++i) {
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
 800031e:	68fa      	ldr	r2, [r7, #12]
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	429a      	cmp	r2, r3
 8000324:	dbf1      	blt.n	800030a <SysTickDelay+0xe>
	}
	SysTick->VAL = 0;
 8000326:	4b04      	ldr	r3, [pc, #16]	@ (8000338 <SysTickDelay+0x3c>)
 8000328:	2200      	movs	r2, #0
 800032a:	609a      	str	r2, [r3, #8]

}
 800032c:	bf00      	nop
 800032e:	3714      	adds	r7, #20
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000e010 	.word	0xe000e010

0800033c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800033c:	480d      	ldr	r0, [pc, #52]	@ (8000374 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000340:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000344:	480c      	ldr	r0, [pc, #48]	@ (8000378 <LoopForever+0x6>)
  ldr r1, =_edata
 8000346:	490d      	ldr	r1, [pc, #52]	@ (800037c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000348:	4a0d      	ldr	r2, [pc, #52]	@ (8000380 <LoopForever+0xe>)
  movs r3, #0
 800034a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800034c:	e002      	b.n	8000354 <LoopCopyDataInit>

0800034e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000350:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000352:	3304      	adds	r3, #4

08000354 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000354:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000356:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000358:	d3f9      	bcc.n	800034e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800035a:	4a0a      	ldr	r2, [pc, #40]	@ (8000384 <LoopForever+0x12>)
  ldr r4, =_ebss
 800035c:	4c0a      	ldr	r4, [pc, #40]	@ (8000388 <LoopForever+0x16>)
  movs r3, #0
 800035e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000360:	e001      	b.n	8000366 <LoopFillZerobss>

08000362 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000362:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000364:	3204      	adds	r2, #4

08000366 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000366:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000368:	d3fb      	bcc.n	8000362 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800036a:	f000 f811 	bl	8000390 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036e:	f7ff ff97 	bl	80002a0 <main>

08000372 <LoopForever>:

LoopForever:
  b LoopForever
 8000372:	e7fe      	b.n	8000372 <LoopForever>
  ldr   r0, =_estack
 8000374:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000378:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800037c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000380:	080003f8 	.word	0x080003f8
  ldr r2, =_sbss
 8000384:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000388:	2000001c 	.word	0x2000001c

0800038c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800038c:	e7fe      	b.n	800038c <ADC_IRQHandler>
	...

08000390 <__libc_init_array>:
 8000390:	b570      	push	{r4, r5, r6, lr}
 8000392:	4d0d      	ldr	r5, [pc, #52]	@ (80003c8 <__libc_init_array+0x38>)
 8000394:	4c0d      	ldr	r4, [pc, #52]	@ (80003cc <__libc_init_array+0x3c>)
 8000396:	1b64      	subs	r4, r4, r5
 8000398:	10a4      	asrs	r4, r4, #2
 800039a:	2600      	movs	r6, #0
 800039c:	42a6      	cmp	r6, r4
 800039e:	d109      	bne.n	80003b4 <__libc_init_array+0x24>
 80003a0:	4d0b      	ldr	r5, [pc, #44]	@ (80003d0 <__libc_init_array+0x40>)
 80003a2:	4c0c      	ldr	r4, [pc, #48]	@ (80003d4 <__libc_init_array+0x44>)
 80003a4:	f000 f818 	bl	80003d8 <_init>
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	10a4      	asrs	r4, r4, #2
 80003ac:	2600      	movs	r6, #0
 80003ae:	42a6      	cmp	r6, r4
 80003b0:	d105      	bne.n	80003be <__libc_init_array+0x2e>
 80003b2:	bd70      	pop	{r4, r5, r6, pc}
 80003b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b8:	4798      	blx	r3
 80003ba:	3601      	adds	r6, #1
 80003bc:	e7ee      	b.n	800039c <__libc_init_array+0xc>
 80003be:	f855 3b04 	ldr.w	r3, [r5], #4
 80003c2:	4798      	blx	r3
 80003c4:	3601      	adds	r6, #1
 80003c6:	e7f2      	b.n	80003ae <__libc_init_array+0x1e>
 80003c8:	080003f0 	.word	0x080003f0
 80003cc:	080003f0 	.word	0x080003f0
 80003d0:	080003f0 	.word	0x080003f0
 80003d4:	080003f4 	.word	0x080003f4

080003d8 <_init>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr

080003e4 <_fini>:
 80003e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003e6:	bf00      	nop
 80003e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ea:	bc08      	pop	{r3}
 80003ec:	469e      	mov	lr, r3
 80003ee:	4770      	bx	lr
